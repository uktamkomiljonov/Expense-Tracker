# bot.py
from bot_instance import bot
from config import TOKEN
from database import init_db, add_expense, add_bill, get_expenses
from analysis import get_total_expenses, get_category_stats
from speech import recognize_voice
from advisor import generate_advice
from gamification import format_achievements
from reminders import start_scheduler

def main():
    init_db()        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    start_scheduler() # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    bot.polling(none_stop=True)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.\n"
        "–ù–∞–ø–∏—à–∏ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: '10000 —Å—É–º –Ω–∞ –µ–¥—É'.\n"
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/add_bill ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
        "/advice ‚Äî —Å–æ–≤–µ—Ç—ã\n"
        "/achievements ‚Äî –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
    )

# -- –†–∞—Å—Ö–æ–¥—ã (—Ç–µ–∫—Å—Ç) --
@bot.message_handler(func=lambda msg: msg.content_type == 'text' and not msg.text.startswith('/'))
def handle_text_expense(message):
    text = message.text.lower()
    words = text.split()
    try:
        amount = int(words[0])
        category = " ".join(words[2:]) if len(words) > 2 else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        add_expense(message.chat.id, amount, category)
        bot.reply_to(message, f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} —Å—É–º –Ω–∞ {category}.")
    except ValueError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: '10000 —Å—É–º –Ω–∞ –µ–¥—É'.")

# -- –†–∞—Å—Ö–æ–¥—ã (–≥–æ–ª–æ—Å–æ–≤—ã–µ) --
@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    text = recognize_voice(bot, message)
    if text:
        message.text = text
        handle_text_expense(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

# -- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∏–ª–ª–∞ --
@bot.message_handler(commands=['add_bill'])
def add_bill_handler(message):
    bot.send_message(message.chat.id,
        "–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "'50000 —Å—É–º, –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ, 2025-03-01, monthly'\n"
        "–≥–¥–µ 'monthly' ‚Äì –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º).")

@bot.message_handler(func=lambda msg: "," in msg.text and "—Å—É–º" in msg.text)
def process_bill(message):
    try:
        parts = [p.strip() for p in message.text.split(",")]
        amount = int(parts[0].split()[0])
        category = parts[1]
        due_date = parts[2]
        recurrence = parts[3] if len(parts) > 3 else ""
        add_bill(message.chat.id, amount, category, due_date, recurrence)
        bot.reply_to(message, f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω –ø–ª–∞—Ç–µ–∂: {amount} —Å—É–º –Ω–∞ '{category}', —Å—Ä–æ–∫ {due_date}.")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

# -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ --
@bot.message_handler(commands=['stats'])
def send_stats(message):
    user_id = message.chat.id
    total = get_total_expenses(user_id, "month")
    stats = get_category_stats(user_id, "month")

    stats_text = "\n".join([f"{cat}: {amt} —Å—É–º" for cat, amt in stats]) if stats else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    bot.send_message(user_id,
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü:\n\n–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {total} —Å—É–º\n\n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n{stats_text}")

# -- –°–æ–≤–µ—Ç—ã (–Ω–∞—à –∞–ª–≥–æ—Ä–∏—Ç–º) --
@bot.message_handler(commands=['advice'])
def advice_handler(message):
    user_id = message.chat.id
    advice = generate_advice(user_id)
    bot.send_message(user_id, f"üí° –°–æ–≤–µ—Ç—ã:\n{advice}")

# -- –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è --
@bot.message_handler(commands=['achievements'])
def achievements_handler(message):
    user_id = message.chat.id
    text = format_achievements(user_id)
    bot.send_message(user_id, text)

if __name__ == "__main__":
    main()
